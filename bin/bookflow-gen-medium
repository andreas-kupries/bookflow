#!/usr/bin/env tclsh
# -*- tcl -*-
# # ## ### ##### ######## ############# #####################
# Go through the images in the project and scale them down to a medium
# size 'thumbnail' (640x480) for display in GUI apps.

package require Tcl 8.5

::apply {{selfdir} {
    # selfdir == bindir
    lappend ::auto_path [file dirname $selfdir]/lib
    return
}} [file dirname [file normalize [info script]]]

# TODO: Restrict to images of a certain size and/or make (camera type).

package require bookflow::project

package require crimp::tk  ;# photo -> crimp 
package require crimp::ppm ;# crimp -> writing ppm
package require img::jpeg  ;# img -> photo
package require crimp      ;# resizing
# XXX TODO: crimp::jpeg

# Disable anything from the GUI, there is nothing.
wm withdraw .

proc mi {} { return
    set mi [split [memory info] \n]
    return [list [lindex $mi 3 3] [lindex $mi 5 3]]
}

# # ## ### ##### ######## ############# #####################

proc main {} {
    if {[catch {
	cmdline
	generate-medium
	complete-project
    } msg]} {
	puts stderr $msg
	exit 1
    }
    return
}

proc cmdline {} {
    global argv argv0 w h
    if {([llength $argv] > 2) && ([llength $argv] < 1)} {
	puts stderr "Usage: $argv0 w ?projectdir?"
	exit 1
    }
    set argv [lassign $argv w]
    if {[llength $argv] == 1} {
	cd [lindex $argv 0]
    }

    # Open the project file.
    bookflow::project BOOK [pwd]/BOOKFLOW

    set h [expr {3*$w/4}]
    return
}

proc generate-medium {} {
    global w h

    set images [BOOK images-all]
    if {![llength $images]} return

    set pdir [BOOK where]

    set k 0
    set n [llength $images]

    foreach image $images {
	incr k
	tell "\rMedium $image \[$k/$n\]"

	# Load image, by way of Tk photo - crimp currently doesn't
	# have a jpeg reader, yet.

	tell " /load"
	image create photo IMAGE -file $pdir/$image
	set i [crimp convert 2rgb [crimp read tk IMAGE]]
	image delete IMAGE

	# We blur the image before scaling it down, so that the
	# resampler has (indirect) access to the larger environment
	# the pxel is composed of, and not just the 4 corners around
	# the origin point.

	# What sigma do we need ? This is scale dependent.
	# Sigma is a third of the factor we are scaling down by.

	# Because the factor gives us the radius of the environment,
	# and for a given sigma the effective filter radius is 3 times
	# that, conversely making sigma a third of the radius.

	set iw [crimp width $i]
	set sigma [expr {double($i)/(3*$w)}]

	tell /blur   ; set i [blur $i]
	tell /resize ; set i [crimp::resize $i $w $h]

	tell /write
	crimp write 2file ppm-raw [BOOK medium-path $image] $i

	tell " OK [mi]"
    }

    puts stderr ""
    return
}

proc blur {i} {
    set res {}
    foreach c [crimp split $i] {
	tell *
	set c [crimp convert 2float $c]
	set c [crimp gaussian_blur_float $c $sigma]
	set c [crimp convert 2grey8 $c]
	lappend res $c
    }
    return [crimp join 2rgb {*}$res]
}

proc complete-project {} {
    BOOK destroy
    return
}

proc tell {text} {
    puts -nonewline stderr $text
    flush stderr
}

# # ## ### ##### ######## ############# #####################

main
exit
