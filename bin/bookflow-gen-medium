#!/usr/bin/env tclsh
# -*- tcl -*-
# # ## ### ##### ######## ############# #####################
# Go through the images in the project and scale them down to a medium
# size 'thumbnail' (640x480) for display in GUI apps.

package require Tcl 8.5

::apply {{selfdir} {
    # selfdir == bindir
    lappend ::auto_path [file dirname $selfdir]/lib
    return
}} [file dirname [file normalize [info script]]]

# TODO: Restrict to images of a certain size and/or make (camera type).

package require fileutil
package require fileutil::traverse
package require bookflow::project

package require crimp::tk  ;# photo -> crimp 
package require crimp::ppm ;# crimp -> writing ppm
package require img::jpeg  ;# img -> photo
package require crimp      ;# resizing
# XXX TODO: crimp::jpeg

# Disable anything from the GUI, there is nothing.
wm withdraw .

proc mi {} { return
    set mi [split [memory info] \n]
    return [list [lindex $mi 3 3] [lindex $mi 5 3]]
}

# # ## ### ##### ######## ############# #####################

proc main {} {
    if {[catch {
	cmdline
	generate-medium
	complete-project
    } msg]} {
	puts stderr $msg
	exit 1
    }
    return
}

proc cmdline {} {
    global argv argv0
    if {[llength $argv] > 1} {
	puts stderr "Usage: $argv0 ?projectdir?"
	exit 1
    }
    if {[llength $argv] == 1} {
	cd [lindex $argv 0]
    }

    # Open the project file.
    bookflow::project BOOK [pwd]/BOOKFLOW
    return
}

proc generate-medium {} {
    set images [BOOK images]
    if {![llength $images]} return

    set pdir [BOOK where]

    set k 0
    set n [llength $images]

    foreach image $images {
	incr k
	tell "\rMedium $image \[$k/$n\]"

	# Load image, by way of Tk photo - crimp currently doesn't
	# have a jpeg reader, yet.

	tell " /load"
	image create photo IMAGE -file $pdir/$image
	set i [crimp convert 2rgb [crimp read tk IMAGE]]
	image delete IMAGE

	# Blur it before sizing down, to make the resampler have
	# (indirectly) access to not only the 4 corners around the
	# pixel, but everything from the larger environment which
	# should go into the new pixel.

	# What sigma do we need ? (scale dependent)

	# Here scale down by 11.4, choose sigma 11.4/3 = 3.8
	# filter radius becomes roughly 3 sigma = 11.4.

	tell /blur
	set res {}
	foreach c [crimp split $i] {
	    tell *
	    set c [crimp convert 2float $c]
	    set c [crimp gaussian_blur_float $c 2]
	    set c [crimp convert 2grey8 $c]
	    lappend res $c
	}
	set i [crimp join 2rgb {*}$res]
	unset res c

	# Now the actual down sizing.
	tell /resize
	set i [crimp::resize $i 640 480]

	# And write it out. Change the extension, this not jpeg anymore.
	file mkdir medium/;#[file dirname $image]
	tell /write
	crimp write 2file ppm-raw medium/[file root [file tail $image]].ppm $i

	tell " OK [mi]"
    }

    puts stderr ""
    return
}

proc complete-project {} {
    BOOK destroy
    return
}

proc tell {text} {
    puts -nonewline stderr $text
    flush stderr
}

# # ## ### ##### ######## ############# #####################

main
exit
